class Matrix {
    private int[][] data;

    public Matrix(int rows, int cols) {
        data = new int[rows][cols];
        // Initialize the matrix with some data (you can modify this as needed)
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                data[i][j] = i * cols + j + 1;
            }
        }
    }

    public int getRows() {
        return data.length;
    }

    public int getCols() {
        return data[0].length;
    }

    public int getElement(int row, int col) {
        return data[row][col];
    }
}

class DisplayMatrixThread extends Thread {
    private Matrix matrix;

    public DisplayMatrixThread(Matrix matrix) {
        this.matrix = matrix;
    }

    @Override
    public void run() {
        int rows = matrix.getRows();
        int cols = matrix.getCols();

        System.out.println("Matrix Elements:");

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(matrix.getElement(i, j) + " ");
            }
            System.out.println();
        }
    }
}

class TransposeMatrixThread extends Thread {
    private Matrix matrix;

    public TransposeMatrixThread(Matrix matrix) {
        this.matrix = matrix;
    }

    @Override
    public void run() {
        int rows = matrix.getRows();
        int cols = matrix.getCols();

        System.out.println("Transpose of the Matrix:");

        for (int j = 0; j < cols; j++) {
            for (int i = 0; i < rows; i++) {
                System.out.print(matrix.getElement(i, j) + " ");
            }
            System.out.println();
        }
    }
}

class MaxValueThread extends Thread {
    private Matrix matrix;

    public MaxValueThread(Matrix matrix) {
        this.matrix = matrix;
    }

    @Override
    public void run() {
        int max = Integer.MIN_VALUE;
        int rows = matrix.getRows();
        int cols = matrix.getCols();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int element = matrix.getElement(i, j);
                if (element > max) {
                    max = element;
                }
            }
        }

        System.out.println("Maximum Value in the Matrix: " + max);
    }
}

class PrincipalDiagonalThread extends Thread {
    private Matrix matrix;

    public PrincipalDiagonalThread(Matrix matrix) {
        this.matrix = matrix;
    }

    @Override
    public void run() {
        int rows = matrix.getRows();
        int cols = matrix.getCols();

        System.out.println("Principal Diagonal Elements:");

        for (int i = 0; i < Math.min(rows, cols); i++) {
            System.out.print(matrix.getElement(i, i) + " ");
        }
        System.out.println();
    }
}

class NonDiagonalThread extends Thread {
    private Matrix matrix;

    public NonDiagonalThread(Matrix matrix) {
        this.matrix = matrix;
    }

    @Override
    public void run() {
        int rows = matrix.getRows();
        int cols = matrix.getCols();

        System.out.println("Non-Diagonal Elements:");

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (i != j) {
                    System.out.print(matrix.getElement(i, j) + " ");
                }
            }
        }
        System.out.println();
    }
}

public class MatrixOperations {
    public static void main(String[] args) {
        Matrix matrix = new Matrix(5, 5);

        Thread t1 = new DisplayMatrixThread(matrix);
        Thread t2 = new TransposeMatrixThread(matrix);
        Thread t3 = new MaxValueThread(matrix);
        Thread t4 = new PrincipalDiagonalThread(matrix);
        Thread t5 = new NonDiagonalThread(matrix);

        t1.start();
        t2.start();
        t3.start();
        t4.start();
        t5.start();
    }
}
