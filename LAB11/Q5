class SharedResource {
    public synchronized void synchronizedMethod() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Thread 1 - Inside synchronizedMethod - Iteration " + i);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println("Thread 1 was interrupted.");
            }
        }
    }

    public void nonSynchronizedMethod() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Thread 2 - Inside nonSynchronizedMethod - Iteration " + i);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println("Thread 2 was interrupted.");
            }
        }
    }
}

public class SynchronizationDemo {
    public static void main(String[] args) {
        final SharedResource resource = new SharedResource();

        // Using synchronized method
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                resource.synchronizedMethod();
            }
        });

        // Using synchronized statement
        Thread t2 = new Thread(new Runnable() {
            public void run() {
                synchronized (resource) {
                    resource.nonSynchronizedMethod();
                }
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread was interrupted while waiting for threads to finish.");
        }

        System.out.println("Main thread has completed.");
    }
}
